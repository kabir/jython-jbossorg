This project defines an ant task (jnic) for building JNI projects.
The steps for using this ant task for building your JNI library are:
 1. Include this project as an external svn resource:
    cd $YOUR_PROJECT_ROOT
    svn propset svn:externals "`svn propget svn:externals .`
    > jnitask         https://projects.thobe.org/svn/public/jnitask
    > " .
 2. Import the task definition file in your build.xml-file:
    <import file="jnitask/jnic.xml"/>
 3. Invoke the task from a target in your build.xml-file:
    <target name="compile">
      <javac destdir="${classes.dir}">
        <!-- This is where you list the files to compile -->
      </javac>
      <!-- perhaps you want to do more stuff here... -->
    </target>
    <target name="headers" depends="compile">
      <mkdir dir="${headers.dir}"/>
      <javah classpath="${classes.dir}" destdir="${headers.dir}">
         <!-- this is where you list classes that have native -->
         <class name="com.example.project.YourClass"/>
      </javah>
    </target>
    <target name="native" depends="headers">
      <jnic library="${native.library.name}"
            sourcepath="${src.native}"
            headerpath="${header.dir}"
            destdir="${build.native}"/>
    </target>

The supported attributes for the jnic target are:
  library       The name of the JNI library to generate. (REQUIRED)
  sourcepath    The path where the native source files are found.
                (REQUIRED)
  headerpath    The path where the javah header files are found.
                Defaults to the same path as sourcepath
  destdir       The path where the output generated by the task
                should be put. This includes both temporary and
                result files. This directory is created if it does
                not exist.
                Defaults to the same path as sourcepath
  mac.SDKROOT   On Mac OS X, this is the path to the SDK used to
                generate universal binaries.
                Computed to a good default if unspecified.
  os            The operating system to compile for.
                Defaults to the OS of the compiling host.
  java.home     The path to the JDK we are compiling for.
                This is used to find the JNI include files.
                Defaults to the java.home of the ant instance.
  debug         "true" or "false" (default="false"), turns on
                debugging support in the compiled code.
  cflags        Additional C compiler flags. (OPTIONAL)
  make          The command used to run a Makefile. (OPTIONAL)
